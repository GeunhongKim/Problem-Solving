# 서강그라운드
import heapq
vertex, ran, edge = map(int,input().split())
item = list(map(int,input().split()))
INF = 10**10


graph = {}
for i in range(1,vertex+1):
    graph[i] = []
for i in range(edge):
    a,b,c = map(int,input().split()) # graph 에 [도착점,edge 거리] 순으로 넣을 것
    graph[a].append([b,c])
    graph[b].append([a,c])

def dijkstra(start):
    dlist = [INF for _ in range(vertex)]
    dlist[start-1] = 0
    q = []
    heapq.heappush(q,[0,start]) # heapq 에 [기존거리,시작지점,모은 아이템] 순으로 저장할 것임
    while q:
        new = heapq.heappop(q)
        for link in graph[new[1]]:
            if dlist[link[0]-1] > dlist[new[1]-1] + link[1]: # 해당 edge 를 통해 가는 도착점의 기존 거리보다 적은 거리를 발견한다면
                dlist[link[0]-1] = dlist[new[1]-1] + link[1] # 도착 vertex 의 거리 최신화
                heapq.heappush(q,[dlist[link[0]-1],link[0]]) # 지금까지의 아이템 최신화해서 heqpq 에 넣기
    count = 0
    for i in range(vertex):
        if dlist[i] <= ran:
            count += item[i]
    
    return count

answer = 0
for i in range(1,vertex+1):
    answer = max(answer,dijkstra(i))
    
print(answer)
