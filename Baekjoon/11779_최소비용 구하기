# 최소비용 구하기 2 : 리스트 덧셈은 non commutative
import heapq

n = int(input())
m = int(input())

graph = {}
for i in range(1,n+1):
    graph[i] = []
for i in range(m):
    a,b,c = map(int,input().split())
    graph[a].append([c,b]) # graph 에 [distance, arrive point] 의 형태로 저장할 것임

s, e = map(int,input().split())

INF = 10**10
dlist = [INF for _ in range(n)]

def dijkstra(start,end):
    count = 0
    mindist = INF
    minpath = []
    dlist[start-1] = 0
    q = []
    heapq.heappush(q,[0,start,[start]]) # priority queue 에 [거리, 지점, 경로] 형태로 저장할 것임.
    while q:
        new = heapq.heappop(q)

        # 만약 new 의 지점이 도착 지점이고, 기존 최단거리보다 짧다면
        if new[1] == end and new[0] < mindist:
            mindist = new[0] # mindist 에 최단거리 저장하고
            minpath = new[2] # minpath 에 경로 저장함

        if new[0] > mindist: # 만약 이번 정점까지의 거리가 이미 찾은 최단거리보다 크다면
            continue

        for adj in graph[new[1]]: # 인접 지점들에 대해
            # 만약 도착점의 dlist 값이 시작점의 dlist 에 edge 길이를 더한 것보다 크면
            if dlist[adj[1]-1] > dlist[new[1]-1] + adj[0]:
                dlist[adj[1]-1] = dlist[new[1]-1] + adj[0] # dlist 업데이트하고
                heapq.heappush(q,[dlist[adj[1]-1],adj[1], new[2]+[adj[1]]]) # priority queue 에 넣어줌

    return (mindist,len(minpath), minpath)

answer = dijkstra(s,e)
print(answer[0])
print(answer[1])
print(' '.join(list(map(str,answer[2]))))
