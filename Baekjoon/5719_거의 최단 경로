from collections import deque
import heapq
import sys
INF = 10**10

def minpath(start,N,graph): # 경로까지 같이 찾기 위한 함수
    q = []
    heapq.heappush(q,[0,start,0]) # 최단거리, 지점, 이전노드
    dlist = [INF for _ in range(N)]
    dlist[start] = 0
    bef = [[] for _ in range(N)]

    while q:
        new = heapq.heappop(q)
        for adj in graph[new[1]]:
            if dlist[adj[1]] > dlist[new[1]] + adj[0]: # 기존 최단 경로보다 더 짧은 경로를 찾아내면 : 거리/경로 초기화, queue 에 넣기
                dlist[adj[1]] = dlist[new[1]] + adj[0]
                bef[adj[1]] = []
                bef[adj[1]].append(new[1])
                heapq.heappush(q,[dlist[adj[1]],adj[1],new[1]])
            elif dlist[adj[1]] == dlist[new[1]] + adj[0]: # 기존 최단 경로와 같은 길이의 경로를 또 찾으면 : 경로만 반영해주기
                bef[adj[1]].append(new[1])
    return bef

def mindist(start,end,N,graph): # 최단거리만 찾는 함수
    q = []
    heapq.heappush(q,[0,start,0]) # 최단거리, 지점, 이전노드
    dlist = [INF for _ in range(N)]
    dlist[start] = 0

    while q:
        new = heapq.heappop(q)
        for adj in graph[new[1]]:
            if dlist[adj[1]] > dlist[new[1]] + adj[0]: # 기존 최단 경로보다 더 짧은 경로를 찾아내면 : 거리 반영, queue 에 넣기
                dlist[adj[1]] = dlist[new[1]] + adj[0]
                heapq.heappush(q,[dlist[adj[1]],adj[1],new[1]])
    '''            
    print(dlist)
    '''
    if dlist[end] == INF:
        print(-1)
        return
    else:
        print(dlist[end])
        return

while True:
    N,M = map(int,input().split())
    # 탈출조건
    if [N,M] == [0,0]:
        break

    # 입력 받기
    else:
        S,D = map(int,sys.stdin.readline().split())
        # 그래프 만들기
        graph = {}
        another = {}

        for i in range(N):
            graph[i] = []
        for i in range(M):
            a,b,c = map(int,input().split())
            graph[a].append([c,b])
            another[(a,b)] = c
            
        # 최단경로 찾기 : using minpath
        path = minpath(S,N,graph)
        '''
        print(path)
        '''
        
        # 최단경로 간선 추적 / 삭제
        q = deque()
        q.append(D)
        vst = set() # visited 를 set으로 구현
        while q:
            new = q.popleft()
            for adj in path[new]:
                if (adj,new) not in vst: #첫 방문인 인접지점이면
                    # 해줄거 해주고
                    for points in graph[adj]: # 해당하는 간선 가중치 높여줌
                        if points[1] == new:
                            points[0] = INF
                    # visited 갱신하고 넣어줌
                    vst.add((adj,new))
                    q.append(adj)
        '''
        print(vst)         
        print(graph)
        '''
        # 최단거리 탐색
        mindist(S,D,N,graph)
        
