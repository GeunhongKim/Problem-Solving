# DFS의 스택 구현 : BFS를 구현할 때와 흐름 자체는 같다. 여기서 차이점은 빼주는 방향이다.
# DFS의 스택 구현 : 반대 방향에서 빼기 때문에 입력되는 그래프의 value 또한 거꾸로 정렬되어 있어야 오름차순으로 순회한다.
# DFS의 스택 구현 : visited 를 갱신하는 위치가 다르다. stack에 넣을 때가 아니라 pop 해줄때 갱신해야 한다.

import copy
from collections import deque
node, link, start = map(int,input().split())

graph = {}

# 그래프 준비 : 딕셔너리
for i in range(1,node+1):
    graph[i] = []

for i in range(link):
    a,b = map(int,input().split())
    graph[a].append(b)
    graph[b].append(a)

for i in graph.keys():  # 연결된 노드들 정렬
    graph[i].sort()

dgraph = copy.deepcopy(graph) # dfs는 그래프를 역순으로 정렬해야 함
for i in dgraph.keys():
    dgraph[i].sort(reverse=True)



# bfs 준비
b = []
visited_bfs = [0 for i in range(node)]

def bfs(start,visited, graph):
    queue = deque([start])
    visited[start-1] = 1
    while queue:
        v = queue.popleft()
        b.append(v)
        for i in graph[v]:
            if visited[i-1] != 0:
                continue
            queue.append(i)
            visited[i-1] = 1
    


# dfs 준비
d = []  
visited_dfs = [0 for i in range(node)]   

def dfs(start, visited, graph):
    stack = deque([start])
    visited[start-1] = 1
    while stack:
        v = stack.pop()
        visited[v-1] = 1
        if v not in d:
            d.append(v)
        for i in graph[v]:
            if visited[i-1] != 0:
                continue
            stack.append(i)
            
# 함수 실행
bfs(start, visited_bfs, graph)
dfs(start, visited_dfs, dgraph)

#결과 출력
for i in range(len(d)):
    if i == len(d)-1:
        print(d[i])
    else:
        print(d[i], end = " ")

for i in range(len(b)):
    if i == len(b)-1:
        print(b[i])
    else:
        print(b[i], end = " ")
