# 개코전쟁
from collections import deque
import heapq
INF = 10**10

def minpath(start,N,graph): # 경로까지 같이 찾기 위한 함수
    q = []
    heapq.heappush(q,[0,start,0]) # 최단거리, 지점, 이전노드
    dlist = [INF for _ in range(N)]
    dlist[start-1] = 0
    bef = [[] for _ in range(N)]

    while q:
        new = heapq.heappop(q)
        for adj in graph[new[1]]:
            if dlist[adj[1]-1] > dlist[new[1]-1] + adj[0]: # 기존 최단 경로보다 더 짧은 경로를 찾아내면 : 거리/경로 초기화, queue 에 넣기
                dlist[adj[1]-1] = dlist[new[1]-1] + adj[0]
                bef[adj[1]-1] = []
                bef[adj[1]-1].append(new[1])
                heapq.heappush(q,[dlist[adj[1]-1],adj[1],new[1]])
            elif dlist[adj[1]-1] == dlist[new[1]-1] + adj[0]: # 기존 최단 경로와 같은 길이의 경로를 또 찾으면 : 경로만 반영해주기
                bef[adj[1]-1].append(new[1])
    return bef

def mindist(start,end,ban): # 특정 경로 제외한 최단거리 찾는
    q = []
    heapq.heappush(q,[0,start,0]) # 최단거리, 지점, 이전노드
    dlist = [INF for _ in range(N)]
    dlist[start-1] = 0

    while q:
        new = heapq.heappop(q)
        for adj in graph[new[1]]:
            '''
            print(ban,new[1],adj[1],(new[1],adj[1]) == ban or (adj[1],new[1]) == ban)
            '''
            if (not((new[1],adj[1]) == ban or (adj[1],new[1]) == ban)) and dlist[adj[1]-1] > dlist[new[1]-1] + adj[0]: # 기존 최단 경로보다 더 짧은 경로를 찾아내면 : 거리/경로 초기화, queue 에 넣기
                dlist[adj[1]-1] = dlist[new[1]-1] + adj[0]
                heapq.heappush(q,[dlist[adj[1]-1],adj[1],new[1]])
    '''
    print("==========")
    print(ban,dlist)
    '''
    return dlist[N-1]

# 입력 받기
N,M = map(int,input().split())
graph = {}
for i in range(1,N+1):
    graph[i] = []
for _ in range(M):
    a,b,c = map(int,input().split())
    graph[a].append([c,b])
    graph[b].append([c,a])

# 최단경로 찾기
path = minpath(1,N,graph)
'''
print("a",path)
'''

q = deque()
q.append(N)
vst = set() # visited 를 set으로 구현
while q:
    new = q.popleft()
    for adj in path[new-1]:
        if (adj,new) not in vst: #첫 방문인 인접지점이면
            # visited 갱신하고 넣어줌
            vst.add((adj,new))
            q.append(adj)
'''
print(vst)
'''

# 답 구하기
secondmin = -1
for i in vst:
    secondmin = max(mindist(1,N,i),secondmin)

print(secondmin)
