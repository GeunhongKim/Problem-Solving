# 최근 푼 문제 중 가장 피드백할 거리가 많은 문제.
# 일단 여기에 올리는 방법이 아닌 다른 방법으로 계속 시도하며 여러 테스트케이스를 통한 돌려막기를 하다가 실패했다.
  코드가 너무 복잡해져 방법을 수정하였는데, 사실 그동안 너무 조잡하게 코드를 짜는 것을 "어쨌든 풀었다" 며 묵인해온 업보인 것 같다.
  > 방향 반복할 때 일일히 하지 말고 그냥 반복문 쓰자.
  > 턴 계산할 때 너무 이전 visited 값 참조해서 visited 에 넣는 방법과 count 하나 만들어서 쓰는 방법 두 개 중 어느 것을 써야 편할지 판단하는 능력이 부족한 것 같다.


from collections import deque

n, m = map(int,input().split())

# 체스판 만들기
visited = [0 for i in range(100)]

# 뱀과 사다리 만들기
snake = {}
ladder = {}
for i in range(n):
    a,b = map(int,input().split())
    ladder[a-1] = b-1
for i in range(m):
    a,b = map(int,input().split())
    snake[a-1] = b-1

# 탐색함수 구현
def bfs(visited):
    queue = deque([0])
    count = 0
    while True: # 100번째 찾을 때까지 반복
        for i in range(len(queue)):  # queue 의 길이로 반복문을 돌림으로서 몇 번째 턴인지 계산 ★ 
            x = queue.popleft()
            if x == 99:
                print(count)
                return
            for i in range(1,7):  # 각 이동 방향을 반복문으로 구현 ★
                nx = x + i
                if nx < 100 and visited[nx] == 0:
                    visited[nx] = 1
                    if nx in snake.keys():
                        visited[snake[nx]] = 1
                        queue.append(snake[nx])
                    elif nx in ladder.keys():
                        visited[ladder[nx]] = 1
                        queue.append(ladder[nx])
                    else:
                        queue.append(nx)
        count += 1

bfs(visited)
