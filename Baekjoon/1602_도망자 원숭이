# 입력 -> vertex / edge / question / 방해 시간
N,M,Q = map(int,input().split())
hind = list(map(int,input().split()))

# dogs 에 방해 시간이 적은 순서대로 위치를 저장 => d 사용할 것임
d = []
for i in range(N):
    d.append([hind[i],i])
d = sorted(d,key = lambda x:x[0]) # d 를 hinder 작은 순으로 정렬
print(d)


# dlist 와 total 만들기 : 입력 -> edge 와 가중치
INF = 10**10
dlist = [[INF for _ in range(N)] for _ in range(N)]
total = [[INF for _ in range(N)] for _ in range(N)]

for i in range(M):
    a, b, c = map(int, input().split())
    dlist[a-1][b-1] = min(c,dlist[a-1][b-1])
    dlist[b-1][a-1] = min(c,dlist[b-1][a-1])

for i in range(N):
    dlist[i][i] = 0
    total[i][i] = 0

def Floyd(dlist, total):
    for k in d:
        for i in range(N):
            if dlist[i][k[1]] == INF:
                continue
            for j in range(N):
                dlist[i][j] = min(dlist[i][k[1]]+dlist[k[1]][j],dlist[i][j])
                total[i][j] = min(dlist[i][k[1]]+dlist[k[1]][j]+k[0],total[i][j])
    return

Floyd(dlist, total)

# 질의 처리
for _ in range(Q):
    a, b = map(int, input().split())
    a -= 1; b -= 1
    print(-1 if total[a][b] == INF else total[a][b])
